Welcome to Xapian
=================

Xapian's build system is built using GNU autoconf, automake, and libtool.
If you've installed other Open Source projects from source, you should
find yourself in familiar territory.  Building and installing involves
the following 3 simple steps:

 1) Run "./configure", possibly with some extra arguments (see below)
 2) Run "make" to build Xapian
 3) Run "make install" to install Xapian

Prerequisites
=============

You'll need to have zlib installed (https://www.zlib.net/) before you can build
Xapian.  The zlib library is very widely used, so you'll probably have it
installed already if you're using Linux, FreeBSD, or similar, but you may need
to install a "zlib development" package to get the zlib library headers.

You'll need at least zlib 1.2.5.2 (released 2011-12-17 so it's unlikely you'll
have an older version installed), but unless you're using a packaged version
with backported patches for security fixes and serious bugs, you should
probably use the latest upstream release.

Xapian also requires a way to generate UUIDs.  On FreeBSD, NetBSD, OpenBSD,
AIX and Microsoft Windows, Xapian makes use of built-in UUID APIs.  On Linux
and Android, Xapian 1.4.2 and higher can read UUIDs from a special file under
/proc.  Otherwise you need to install libuuid which you can find in
util-linux (https://github.com/karelzak/util-linux).  On Debian and
Ubuntu, the package to install is uuid-dev, while on Fedora, it is
libuuid-devel (on older Fedora versions you instead need e2fsprogs-devel).

Optionally, ICU can be used for finding words boundaries in text for some
languages which are not written with explicit word breaks.  This support
is automatically included in the build if both ICU >= 54.1 and pkg-config
are found.

Platforms
=========

Xapian (and particularly xapian-core) aims to be portable to almost all
modern platforms.  In particular, there's no assembler code, we support both
little-endian and big-endian platforms, and both 32-bit and 64-bit
architectures are supported.  There's no fundamental reason why Xapian wouldn't
work on a 16-bit architecture (provided it supports more than 64KB of memory,
e.g. via a segmented memory model) but it's not been tested by anyone as far as
we're aware and some porting work would probably be needed.

There are a small number of assumptions made:

POSIX APIs are available
------------------------

We use POSIX APIs with fall-back code for known cases where support is limited
or missing (Microsoft Windows accounts for the majority of such fall-back
code).  Porting to a new platform which doesn't have good POSIX support may
require adding additional fall-back code.

Character encoding is ASCII-based
---------------------------------

Porting work would be required to run correctly on a platform using a different
character encoding (such as EBCDIC).

Signed integers use two's complement representation
---------------------------------------------------

C++20 has now made this a requirement.  Xapian doesn't yet require C++20, and
older versions of the language standard didn't require this, but apparently all
C++ implementations actually use it anyway.

FLT_RADIX is 2
--------------

It seems all modern platforms use 2 for FLT_RADIX.  This assumption should be
easy to eliminate if you actually have such a platform, but it's hard to
properly test a change to do so without such a platform.

Double precision floating point does not have excess precision
--------------------------------------------------------------

A few older CPU architectures (x86 with 387 FP instructions, and m68k models
68030 and earlier) internally calculate and hold values with excess precision
and reduce precision when storing to memory.

This unfortunately makes some normally easy tasks very hard to perform
consistently, such as ordering results by weight - a key part of what Xapian
does.  Calculating and comparing two weights can give a different order if one
is spilled to memory and reloaded while the other remains in a register (and
when values are spilled depends on the compiler).  This can lead to a > b  and
b > a both evaluating as true, violating the ordering requirements for sort
comparison routines and leading to C++ undefined behaviour.

We have some special-case code which works around this in the place where it
has been reported to cause segfaults, but this doesn't address the general
problem that excess precision can cause calculating the same equations using
the same input values via two different code paths to give different results
and there may be more cases of undefined behaviour due to this which haven't
been uncovered yet.  We don't recommend using such a build, and can't really
support people trying to use it.

For old m68k CPUs we don't have a better solution, but the 68030 was released
in 1987 so can probably be considered obsolete now.

For x86, a simple solution is to use SSE FP instructions instead as these
don't have excess precision.  The configure script in xapian-core will select
SSE2 (which requires a Pentium 4 or later) on x86 if it knows how to for the
compiler in use.

This can be a problem if you're building binary packages for a distribution
which has an x86 baseline which doesn't include SSE2.

If your x86 baseline includes SSE (which requires a Pentium 3 or later) but
not SSE2, then configuring with --enable-sse=sse will select SSE instead.

If your x86 baseline requires a build without SSE, we strongly recommend
providing a build with SSE or SSE2 as well.  On Linux at least, the dynamic
linker will load an alternative version of a shared library from a subdirectory
based on runtime detection of the hardware capabilities of CPU model in use, so
you can satisfy your baseline requires while providing the vast majority of
your users with a better quality build.  See
https://trac.xapian.org/wiki/PackagingXapian for an outline of how the Debian
xapian-core packaging does this.

Compilers
=========

We aim to support compilation with any C++ compiler which support ISO C++17, or
a reasonable approximation to it.  If you still need to build Xapian with an
older compiler then Xapian 1.4.x only requires C++11.

GCC
---

If you're using GCC, we currently recommend GCC 7.0 or newer (this is the
oldest version we regularly test with).

The current hard minimum requirement is also GCC 7.0 (due to requiring good
support for C++17, for example non-static data member initializers aren't
supported by earlier versions).

If you really still need to use an older version of GCC, Xapian 1.4.x aims
to support GCC 4.7, while Xapian 1.2.x doesn't require C++11 support and should
build with older versions - probably as far back as GCC 3.1.

Clang
-----

Clang 6.0 is known to work.  We haven't identified the exact minimum
requirement, but it's probably at least Clang 4.0.

MSVC
----

If you're using MS Visual C++, you'll need at least MSVS 2017 for C++17
support. We support both 32-bit and 64-bit compilation.

As of Xapian 1.4.6 building using MSVC is supported by the autotools build
system.  You need to install a set of Unix-like tools first - we recommended
MSYS2: https://www.msys2.org/

You also need to have the MSVC command line tools on your PATH.  This is done
by running a batch file in the MSVC install in the terminal before building.
The exact details vary by MSVC version, 32- vs 64-bit, and the directory and
drive where MSVC is installed.  For MSVC 2017 it should be something like::

  "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars32.bat"

or::

  "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"

You'll need to have the zlib library available.  You can add
``CPPFLAGS=-I/path/to/zlib LDFLAGS=-L/path/to/zlib`` to the configure command
line to tell MSVC where to find the zlib headers and library.

To build, first run configure from a bash shell like so::

  ./configure CC="cl -nologo" CXX="$PWD/compile cl -nologo" CXXFLAGS=-EHsc AR=lib

Then build using GNU make::

  make

MSYS2 64-bit Mingw-64 
---------------------

Install MSYS2-64 bit from here - 
https://www.msys2.org/

Open msys2 Terminal and run the following commands - 

	pacman -Syu --noconfirm

If it promts to close the terminal close it and open again.
re-run the command.

Then open msys64 bit and run the following commands

	pacman -Syu --nocofirm --needed base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-graphviz mingw-w64-x86_64-doxygen git

	./configure CXXFLAGS=-fstack-protector --disable-documentation --disable-backend-honey

	make

	make install

HP's aCC
--------

This compiler doesn't seem to have been updated to support C++17.  If you
really still need to use it you'll have to use Xapian 1.4.x.

Sun C++ Compiler
----------------

This compiler doesn't seem to have been updated to support C++17.  If you
really still need to use it you'll have to use Xapian 1.4.x.

Multi-Arch
==========

When using GCC on platforms which support multiple architectures, the simplest
way to select a non-default architecture is to pass a CXX setting to configure
which includes the appropriate -m option - e.g. to build for x86 on x86-64
you would configure with:

./configure CXX='g++ -m32'

Building in a separate directory
================================

If you wish to perform your build in a separate directory from the source,
create and change to the build directory, and run the configure script (in
the source directory) from the build directory, like so:

  mkdir BUILD
  cd BUILD
  ../configure

Options to give to configure
============================

--enable-assertions
	You should use this to build a version of Xapian with many internal
	consistency checks.  This will run more slowly, but is useful if you
	suspect a bug in Xapian.

--enable-backend-glass
--enable-backend-honey
--enable-backend-inmemory
--enable-backend-remote
	These options enable (or disable if --disable-backend-XXX is specified)
	the compiling of each backend (database access methods).  By default,
	all backends for which the appropriate libraries and OS support are
	available will be enabled.  Note: Currently disabling the remote
	backend also disables replication (because the network code is shared).

_FORTIFY_SOURCE
---------------

When compiling with GCC, by default Xapian will be built with _FORTIFY_SOURCE
set to 2 (except on mingw-w64).  This enables some compile time and runtime
checking of values passed to library functions when building with glibc >=
2.34.  If you wish to disable this for any reason, you can just configure like
so:

./configure CPPFLAGS=-D_FORTIFY_SOURCE=0

Or you can set the "fortification level" to 1 or (with new enough glibc and
GCC) 3 instead of 2:

./configure CPPFLAGS=-D_FORTIFY_SOURCE=1

./configure CPPFLAGS=-D_FORTIFY_SOURCE=3

If you're disabling _FORTIFY_SOURCE because it causes problems, please also
report this to us (via the bug tracker or mailing lists).

On mingw-w64 Xapian doesn't automatically enable _FORTIFY_SOURCE as an extra
library is needed.  You can enable it by hand and specify this library like
so:

./configure CPPFLAGS=-D_FORTIFY_SOURCE=2 LIBS=-lssp

-Bsymbolic-functions
--------------------

If -Wl,-Bsymbolic-functions is supported (for example it is by GCC with modern
ld) then it will be automatically used when linking the library.  This causes
all references from inside the library to symbols inside the library to be
resolved when the library is created, rather than when the shared library is
loaded, which decreases the time taken to load the library, reduces its size,
and is also likely to make the code run a little faster.

Should you wish to disable this for some reason, you can configure like so
which disables the probe for -Bsymbolic-functions so it won't ever be used:

./configure xo_cv_symbolic_functions=no

If you're disabling it because it causes problems, please also report this to
us (via the bug tracker or mailing lists).

-fvisibility
------------

We automatically pass -fvisibility=hidden to the compiler when building the
library when we detect that the compiler support this option and the platform
supports symbol visibility.  We've mark classes, methods, and functions which
need exporting with attributes to make them visible.

Should you wish to disable this for some reason, you can configure like so:

./configure --disable-visibility

If you're disabling it because it causes problems, please also report this to
us (via the bug tracker or mailing lists).

Developers
==========

There are additional scripts and configure options to help people doing
development work on Xapian itself, and people who are building from git.
Read HACKING to find out about them.
